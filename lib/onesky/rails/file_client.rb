require 'onesky/rails/client'
require 'yaml'

module Onesky
  module Rails

    class FileClient < Onesky::Rails::Client

      FILE_FORMAT = 'RUBY_YAML'
      ENCODING    = 'UTF-8'
      DIR_PREFIX  = 'onesky_'
      DEFAULT_LOCALE = 'en'
      APP_FILE = 'app.yml'
      DEVISE_FILE = 'devise.yml'
      TRANSLATION_NOTICE = <<-NOTICE
# This file is generated by onesky-rails gem and will be overwritten at the next download
# Therefore, you should not modify this file
# If you want to modify the translation, please do it at OneSky platform
# If you still want to modify this file directly, please upload this file to OneSky platform after modification in order to update the translation at OneSky

NOTICE

      def upload(string_path)
        all_available_locales.each do |locale|
          app_file_path = File.join(string_path, app_locale_file(locale))
          devise_file_path = File.join(string_path, devise_locale_file(locale))

          puts "Uploading #{locale}..."

          @project.upload_file(file: app_file_path,
                               file_format: FILE_FORMAT,
                               is_keeping_all_strings: is_keep_strings?,
                               locale: locale)
          puts " - #{File.basename(app_file_path)} done!"
          @project.upload_file(file: devise_file_path,
                               file_format: FILE_FORMAT,
                               is_keeping_all_strings: is_keep_strings?,
                               locale: locale)
          puts " - #{File.basename(devise_file_path)} done!"
        end
      end

      def download(string_path, options = {})
        all_available_locales.each do |locale|
          puts "Downloading #{locale}..."

          response = @project.export_translation(source_file_name: APP_FILE, locale: locale)
          save_translation(response, string_path, app_locale_file(locale))
          puts " - #{APP_FILE} done!"
          response = @project.export_translation(source_file_name: DEVISE_FILE, locale: locale)
          save_translation(response, string_path, devise_locale_file(locale))
          puts " - #{DEVISE_FILE} done!"
        end
      end

      protected

      def save_translation(response, string_path, target_file)
        file_path = File.join(string_path, target_file)
        File.open(file_path, 'w') do |f|
          f.write(TRANSLATION_NOTICE + response.body.force_encoding(ENCODING))
        end
      end

      def is_keep_strings?
        return true unless upload_config.has_key?('is_keeping_all_strings')

        !!upload_config['is_keeping_all_strings']
      end

      def upload_config
        @config['upload'] ||= {}
      end

      def all_available_locales
        [:en] + I18n.available_locales.reject { |locale| locale == :en }
      end


      def app_locale_file(locale)
        "#{locale}/#{APP_FILE}"
      end

      def devise_locale_file(locale)
        "#{locale}/#{DEVISE_FILE}"
      end

    end

  end
end
